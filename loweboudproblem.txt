arr[index]>= x;


public class Solution {
    public static int lowerBound(int []arr, int n, int x) {
        int low= 0;
        int high=n-1;
        int ans=n;
        
       // mid= low + (high-low)/2; COMMOM MISTAKE IS THAT U NEED TO CALCULATE MID VALUE IN EACH ITERATION BUT THIS IS NOT HAPPENING WHEN YOU CALCULATE THE MID VALUE OUTSIDE THE WHILE LOOP IT HAS TO BE INSIDE THE LOOP ONLY                                   
        while(low<=high){
            mid= low + (high-low)/2;
            if(a[mid]>=x){
                ans=mid;
                high=mid-1;
            }else{
                low=mid + 1
            }
        }
         return ans;
    }
}
 

// search for insertion position of a given target number

import java.util.*;

public class Main {

    public static int searchInsert(int [] arr, int x) {
        int n = arr.length; // size of the array
        int low = 0, high = n - 1;
        int ans = n;
        
        while (low <= high) {
            int mid = (low + high) / 2;
            // maybe an answer
            if (arr[mid] >= x) {
                ans = mid;
                //look for smaller index on the left
                high = mid - 1;
            } else {
                low = mid + 1; // look on the right
            }
        }
        return ans;
    }

    public static void main(String[] args) {
        int[] arr = {1, 2, 4, 7};
        int x = 6;
        int ind = searchInsert(arr, x);
        System.out.println("The index is: " + ind);
    }
}


public class main(){

    public static int firstlastpos(int[]arr,int target){
        int low=0;
        int high=arr.length

        while(low!=high){
            if(arr[low]!==target){
                low+=1;
            } 
            high=high-1;
        }
        int[] result = {high, low};

        return result
    }
}